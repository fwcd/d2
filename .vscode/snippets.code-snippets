{
	"Send to message channel": {
		"prefix": "msend",
		"scope": "swift",
		"body": "message.channel?.send($0)"
	},
	"Game implementation": {
		"prefix": "game",
		"scope": "swift",
		"body": [
			"public struct $1Game: Game {",
			"\tpublic typealias State = $1State",
			"\t",
			"\tpublic let name: String = $2",
			"\tpublic let actions: [String: (ActionParameters<State>) throws -> ActionResult<State>] = [",
			"\t\t\"move\": { ActionResult(nextState: try \\$0.state.childState(after: try $1Game.parse(move: \\$0.args))) },",
			"\t]",
			"\tpublic let helpText: String = \"\"\"",
			"\t\t$3",
			"\t\t\"\"\"",
			"\t",
			"\tpublic init() {}",
			"\t",
			"\tprivate static func parse(move rawMove: String) throws -> State.Move {",
			"\t\treturn try State.Move(fromString: rawMove)",
			"\t}",
			"}"
		]
	},
	"Game state implementation": {
		"prefix": "gamestate",
		"scope": "swift",
		"body": [
			"import D2MessageIO",
			"import D2Permissions",
			"",
			"public struct $1State: GameState, Multiplayer, FinitePossibleMoves {",
			"\tpublic typealias Role = $1Role",
			"\tpublic typealias Board = $1Board",
			"\tpublic typealias Move = $1Move",
            "\t",
            "\tpublic let players: [GamePlayer]",
			"\tpublic private(set) var board = Board()",
			"\tpublic private(set) var currentRole: Role = $2",
			"\t",
			"\tpublic var possibleMoves: Set<Move> {",
			"\t\treturn $3",
			"\t}",
			"\t",
			"\tpublic var winner: Role? {$4}",
			"\tpublic var isDraw: Bool {$5}",
			"\t",
            "\tpublic init(players: [GamePlayer]) {",
            "\t\tself.players = players",
			"\t}",
			"\t",
			"\tpublic mutating func perform(move: Move, by role: Role) throws {",
			"\t\t$6",
			"\t}",
			"\t",
			"\tpublic func playersOf(role: Role) -> [GamePlayer] {",
			"\t\t$7",
			"\t}",
			"\t",
			"\tpublic func rolesOf(player: GamePlayer) -> [Role] {",
			"\t\t$8",
			"\t}",
			"}"
		]
	},
	"Card game hand implementation": {
		"prefix": "cardgamehand",
		"scope": "swift",
		"body": [
			"import Utils",
			"",
			"public struct $1Hand: RichValueConvertible {",
			"\tpublic var cards: [$1Card]",
			"\t",
			"\t$0",
			"}"
		]
	},
	"Game role implementation": {
		"prefix": "gamerole",
		"scope": "swift",
		"body": [
			"import Utils",
			"",
			"public enum $1Role: Hashable, CaseIterable, RichValueConvertible {",
			"\tcase $2",
			"\tcase $3",
			"\t",
			"\tpublic var asRichValue: RichValue {",
			"\t\tswitch self {",
			"\t\t\tcase .$2: return .text(\"$4\")",
			"\t\t\tcase .$3: return .text(\"$5\")",
			"\t\t}",
			"\t}",
			"\t",
			"\tvar opponent: $1Role {",
			"\t\tswitch self {",
			"\t\t\tcase .$2: return .$3",
			"\t\t\tcase .$3: return .$2",
			"\t\t}",
			"\t}",
			"}"
		]
	},
	"Game move implementation": {
		"prefix": "gamemove",
		"scope": "swift",
		"body": [
			"import Utils",
			"",
			"fileprivate let argsRegex = try! LegacyRegex(from: \"$2\")",
			"",
			"public struct $1Move: Hashable {",
			"\t$3",
			"\t",
			"\tpublic init(fromString str: String) throws {",
			"\t\tif let parsedArgs = argsRegex.firstGroups(in: str) {",
			"\t\t\t$0",
			"\t\t} else {",
			"\t\t\tthrow GameError.invalidMove(\"Your move `\\(str)` is invalid.\")",
			"\t\t}",
			"\t}",
			"}"
		]
	},
	"Game board implementation": {
		"prefix": "gameboard",
		"scope": "swift",
		"body": [
			"import Utils",
			"",
			"public struct $1Board: RichValueConvertible {",
			"\t$0",
			"}"
		]
	},
	"Test case": {
		"prefix": "testcase",
		"scope": "swift",
		"body": [
			"import XCTest",
			"@testable import $1",
			"",
			"final class $2Tests: XCTestCase {",
			"\tfunc test$3() throws {",
			"\t\t$0",
			"\t}",
			"}"
		]
	},
	"Chess piece": {
		"prefix": "chesspiece",
		"scope": "swift",
		"body": [
			"import Utils",
			"",
			"public struct $1: ChessPiece {",
			"\tpublic let pieceType: ChessPieceType = .$2",
			"\tpublic let notationLetters: [Character] = [$3]",
			"\t",
			"\tpublic func possibleMoves(from position: Vec2<Int>, board: [[BoardPieceType?]], role: ChessRole, moved: Bool, isInCheck: Bool) -> [ChessMove] {",
			"\t\t$0",
			"\t}",
			"}",
		]
	},
	"Command test case": {
		"prefix": "commandtest",
		"scope": "swift",
		"body": [
			"import XCTest",
			"import D2TestUtils",
			"@testable import D2Commands",
			"",
			"final class $1CommandTests: XCTestCase {",
			"\tfunc testInvocation() throws {",
			"\t\tlet command = $1Command($2)",
			"\t\tlet output = TestOutput()",
			"\t\t",
			"\t\tcommand.testInvoke(withArgs: $3, output: output)$0",
			"\t}",
			"}"
		]
	},
	"D2Script AST node": {
		"prefix": "d2ast",
		"scope": "swift",
		"body": [
			"public struct D2Script$1: D2ScriptASTNode, Equatable {",
			"\tpublic let label = \"$1\"",
			"\t",
			"\tpublic func accept<V: D2ScriptASTVisitor>(_ visitor: V) -> V.VisitResult {",
			"\t\treturn visitor.visit($2: self)",
			"\t}",
			"\t",
			"\t$0",
			"}"
		]
	},
	"D2Script rule parser": {
		"prefix": "d2rule",
		"scope": "swift",
		"body": [
			"private func parse$1(from tokens: TokenIterator<D2ScriptToken>) throws -> D2Script$1? {",
			"\t$0",
			"}"
		]
	}
}
