#!/bin/bash

# Assembles a Swift toolchain for cross-compilation.
# We use the (already installed) host compiler but use the libraries from the downloaded toolchain.

set -e
cd "$(dirname $0)/.."

for var in TARGETARCH SWIFTVERSION UBUNTUDISTRO TOOLCHAINDIR; do
  if [ -z ${!var} ]; then
    echo "Please set the variable $var!"
    exit 1
  fi
done

downloads_dir="/tmp/d2-swift-downloads"

mkdir -p "$downloads_dir" "$TOOLCHAINDIR"

toolchain_dir="$(cd "$TOOLCHAINDIR" && pwd)"

arch_suffix() {
  case "$1" in
    amd64) ;;
    arm64) echo "-aarch64";;
    *)
      echo "Unsupported arch '$1'"
      exit 1
      ;;
  esac
}

case "$UBUNTUDISTRO" in
  jammy)
    ubuntu_major='22'
    ubuntu_minor='04'
    ;;
  focal)
    ubuntu_major='20'
    ubuntu_minor='04'
    ;;
  *)
    echo "Unsupported Ubuntu version '$UBUNTUDISTRO'"
    exit 1
    ;;
esac

archive_name="swift-$SWIFTVERSION-RELEASE-ubuntu$ubuntu_major.$ubuntu_minor$(arch_suffix $TARGETARCH).tar.gz"
archive_url="https://download.swift.org/swift-$SWIFTVERSION-release/ubuntu$ubuntu_major$ubuntu_minor$(arch_suffix $TARGETARCH)/swift-$SWIFTVERSION-RELEASE/$archive_name"
archive_path="$downloads_dir/$archive_name"

(
  cd "$downloads_dir"

  if [ ! -f "$archive_name" ]; then
    echo "==> Downloading Swift toolchain for $TARGETARCH from $archive_url to $(pwd)"
    curl -OL "$archive_url"
  fi
)

# Based on https://github.com/apple/swift-package-manager/blob/6478e2724/Utilities/build_ubuntu_cross_compilation_toolchain
# 
# This source file is part of the Swift open source project
# Copyright (c) 2014-2022 Apple Inc. and the Swift project authors
# Licensed under Apache License v2.0 with Runtime Library Exception
# See http://swift.org/LICENSE.txt for license information
# See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors

set -eu

function realpath() {
  if [[ "${1:0:1}" = / ]]; then
  echo "$1"
  else
  (
    cd "$(dirname "$1")"
    echo "$(pwd)/$(basename "$1")"
  )
  fi
}

function fix_glibc_modulemap() {
  local glc_mm
  local tmp
  local inc_dir

  glc_mm="$1"
  echo "glibc.modulemap at '$glc_mm'"
  test -f "$glc_mm"

  tmp=$(mktemp "$glc_mm"_orig_XXXXXX)
  inc_dir="$(dirname "$glc_mm")/private_includes"
  cat "$glc_mm" >> "$tmp"
  echo "Paths:"
  echo " - original glibc.modulemap: $tmp"
  echo " - new      glibc.modulemap: $glc_mm"
  echo " - private includes dir:     $inc_dir"
  echo -n > "$glc_mm"
  rm -rf "$inc_dir"
  mkdir "$inc_dir"
  cat "$tmp" | while IFS='' read line; do
    if [[ "$line" =~ ^(\ *header\ )\"\/+usr\/include\/($linux_arch-linux-gnu\/)?([^\"]+)\" ]]; then
      local orig_inc
      local rel_repl_inc
      local repl_inc

      orig_inc="${BASH_REMATCH[3]}"
      rel_repl_inc="$(echo "$orig_inc" | tr / _)"
      repl_inc="$inc_dir/$rel_repl_inc"
      echo "${BASH_REMATCH[1]} \"$(basename "$inc_dir")/$rel_repl_inc\"" >> "$glc_mm"
      if [[ "$orig_inc" == "uuid/uuid.h" ]]; then
        # no idea why ;)
        echo "#include <linux/uuid.h>" >> "$repl_inc"
      else
        echo "#include <$orig_inc>" >> "$repl_inc"
      fi
      true
    else
      echo "$line" >> "$glc_mm"
    fi
  done
}

# set -xv
# where to get stuff from
dest="$toolchain_dir"
linux_swift_pkg="$archive_path"
test -f "$linux_swift_pkg"

# config
blocks_h_url="https://raw.githubusercontent.com/apple/swift-corelibs-libdispatch/main/src/BlocksRuntime/Block.h"
xc_tc_name="swift.xctoolchain"
linux_sdk_name="ubuntu-$UBUNTUDISTRO.sdk"
cross_tc_basename="cross-toolchain"
ubuntu_mirror="http://ports.ubuntu.com/ubuntu-ports" # TODO: Use normal mirror if $TARGETARCH is amd64 or the like
packages_file="$ubuntu_mirror/dists/$UBUNTUDISTRO/main/binary-$TARGETARCH/Packages.gz"
linux_arch="$(Scripts/get-linux-arch-name $TARGETARCH)"
pkg_names=( libc6-dev linux-libc-dev libicu70 libgcc-12-dev libicu-dev libc6 libgcc-s1 libstdc++-12-dev libstdc++6 zlib1g-dev )
pkgs=()

# url
function download_stdout() {
  curl --fail -s "$1"
}

# url, key
function download_with_cache() {
  mkdir -p "$dest/cache"
  local out
  out="$dest/cache/$2"
  if [[ ! -f "$out" ]]; then
    # Download with curl, also follow redirects.
    curl -L --fail -s -o "$out" "$1"
  fi
  echo "$out"
}

# dst, file
function unpack_deb() {
  local tmp
  tmp=$(mktemp -d /tmp/.unpack_deb_XXXXXX)
  (
    cd "$tmp"
    ar -x "$2"
    tar -C "$1" -xf data.tar.*
  )
  rm -rf "$tmp"
}

# dst, file
function unpack() {
  ext=${2##*.}
  "unpack_$ext" "$@"
}

cd "$dest"

rm -rf $cross_tc_basename
mkdir -p "$cross_tc_basename/$linux_sdk_name"

# oopsie, this is slow but seemingly fast enough :)
while read -r line; do
  for pkg_name in "${pkg_names[@]}"; do
    if [[ "$line" =~ ^Filename:\ (.*\/([^/_]+)_.*$) ]]; then
      # echo "${BASH_REMATCH[2]}"
      if [[ "${BASH_REMATCH[2]}" == "$pkg_name" ]]; then
        new_pkg="$ubuntu_mirror/${BASH_REMATCH[1]}"
        pkgs+=( "$new_pkg" )
        echo "- will download $new_pkg"
      fi
    fi
  done
done < <(download_stdout "$packages_file" | gunzip -d -c | grep ^Filename:)

tmp=$(mktemp -d "$dest/tmp_pkgs_XXXXXX")
(
  cd "$tmp"
  for f in "${pkgs[@]}"; do
    name="$(basename "$f")"
    archive="$(download_with_cache "$f" "$name")"
    unpack "$dest/$cross_tc_basename/$linux_sdk_name" "$archive"
  done
)
rm -rf "$tmp"
(
  cd $cross_tc_basename
  mkdir -p "$xc_tc_name/usr/bin"

  # fix absolute symlinks
  find "$linux_sdk_name" -type l | while read -r line; do
    dst=$(readlink "$line")
    if [[ "${dst:0:1}" = / ]]; then
      rm "$line"
      fixedlink=$(echo "./$(dirname "${line#${linux_sdk_name}/}")" | sed 's:/[^/]*:/..:g')"${dst}"
      echo ln -s "${fixedlink#./}" "${line#./}"
      ln -s "${fixedlink#./}" "${line#./}"
    fi
  done
  ln -s 5 "$linux_sdk_name/usr/lib/gcc/$linux_arch-linux-gnu/9"

  tmp=$(mktemp -d "$dest/tmp_pkgs_XXXXXX")
  tar -C "$tmp" --strip-components 1 -xf "$linux_swift_pkg"
  rsync -a --mkpath "$tmp/usr/lib/swift/linux" "$xc_tc_name/usr/lib/swift/"
  rsync -a --mkpath "$tmp/usr/lib/swift_static/linux" "$xc_tc_name/usr/lib/swift_static/"
  rsync -a --mkpath "$tmp/usr/lib/swift/dispatch" "$linux_sdk_name/usr/include/"
  rsync -a --mkpath "$tmp/usr/lib/swift/os" "$linux_sdk_name/usr/include/"
  rsync -a --mkpath "$tmp/usr/lib/swift/CoreFoundation" "$linux_sdk_name/usr/include/"
  rm -rf "$tmp"
  curl --fail -s -o "$linux_sdk_name/usr/include/Block.h" "$blocks_h_url"
  if [ ! -e "$xc_tc_name/usr/bin/swift-autolink-extract" ]; then
    ln -s swift "$xc_tc_name/usr/bin/swift-autolink-extract"
  fi
)
# fix up glibc modulemap
fix_glibc_modulemap "$cross_tc_basename/$xc_tc_name/usr/lib/swift/linux/$linux_arch/glibc.modulemap"

cat > "$cross_tc_basename/ubuntu-$UBUNTUDISTRO-destination.json" <<EOF
{
  "version": 1,
  "sdk": "$(pwd)/$cross_tc_basename/$linux_sdk_name",
  "toolchain-bin-dir": "$(pwd)/$cross_tc_basename/$xc_tc_name/usr/bin",
  "target": "$linux_arch-unknown-linux-gnu",
  "extra-cc-flags": [
    "-fPIC"
  ],
  "extra-swiftc-flags": [
    "-use-ld=lld",
    "-tools-directory", "$(pwd)/$cross_tc_basename/$xc_tc_name/usr/bin",
    "-sdk", "$(pwd)/$cross_tc_basename/$linux_sdk_name"
  ],
  "extra-cpp-flags": [
    "-lstdc++"
  ]
}
EOF

echo
echo "OK, your cross compilation toolchain for Ubuntu $UBUNTUDISTRO is now ready to be used"
echo " - SDK: $(pwd)/$cross_tc_basename/$linux_sdk_name"
echo " - toolchain: $(pwd)/$cross_tc_basename/$xc_tc_name"
echo " - SwiftPM destination.json: $(pwd)/$cross_tc_basename/ubuntu-$UBUNTUDISTRO-destination.json"
