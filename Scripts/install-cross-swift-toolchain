#!/bin/bash

# Downloads a target toolchain when cross-compiling. We use the (already installed) host compiler
# but use the libraries from the downloaded toolchain.

set -e
cd "$(dirname $0)/.."

for var in BUILDARCH TARGETARCH SWIFTVERSION UBUNTUDISTRO TOOLCHAINDIR; do
  if [ -z ${!var} ]; then
    echo "Please set the variable $var!"
    exit 1
  fi
done

downloads_dir="$(mktemp -d /tmp/d2-swift-downloads.XXXXXXXX)"
toolchain_dir="$(cd "$TOOLCHAINDIR" && pwd)"

trap 'rm -rf -- "$downloads_dir"' EXIT

case "$TARGETARCH" in
  amd64) arch_suffix=;;
  arm64) arch_suffix=-aarch64;;
  *)
    echo "Unsupported target arch '$TARGETARCH'"
    exit 1
    ;;
esac

case "$UBUNTUDISTRO" in
  jammy)
    ubuntu_major='22'
    ubuntu_minor='04'
    ;;
  focal)
    ubuntu_major='20'
    ubuntu_minor='04'
    ;;
  *)
    echo "Unsupported Ubuntu version '$UBUNTUDISTRO'"
    exit 1
    ;;
esac

if [ "$BUILDARCH" != "$TARGETARCH" ]; then
  archive_name="swift-$SWIFTVERSION-RELEASE-ubuntu$ubuntu_major.$ubuntu_minor$arch_suffix.tar.gz"
  archive_url="https://download.swift.org/swift-$SWIFTVERSION-release/ubuntu$ubuntu_major$ubuntu_minor$arch_suffix/swift-$SWIFTVERSION-RELEASE/$archive_name"

  cd "$downloads_dir"

  if [ ! -f "$archive_name" ]; then
    echo "==> Downloading Swift toolchain for $TARGETARCH from $archive_url to $(pwd)"
    curl -OL "$archive_url"
  fi

  echo "==> Creating toolchain directory $toolchain_dir if needed"
  mkdir -p "$toolchain_dir"

  echo "==> Unpacking Swift toolchain for $TARGETARCH into $toolchain_dir"
  tar -xvf "$archive_name" --strip-components 1 -C "$toolchain_dir"
fi
