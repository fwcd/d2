#!/bin/bash

# Downloads a target toolchain when cross-compiling. We use the (already installed) host compiler
# but use the libraries from the downloaded toolchain.

set -e
cd "$(dirname $0)/.."

downloads_dir="$(pwd)/local/downloads"
toolchains_dir="$(pwd)/local/cross-target-toolchains"
flags_path="$toolchains_dir/build-flags.txt"

for var in BUILDARCH TARGETARCH SWIFTVERSION; do
  if [ -z ${!var} ]; then
    echo "Please set the variable $var!"
    exit 1
  fi
done

case "$TARGETARCH" in
  amd64) arch_name=x86_64;;
  arm64) arch_name=aarch64;;
  *)
    echo "Unsupported target arch '$TARGETARCH'"
    exit 1
    ;;
esac

if [ "$BUILDARCH" != "$TARGETARCH" ]; then
  archive_name="swift-$SWIFTVERSION-RELEASE-ubuntu20.04-$arch_name.tar.gz"
  archive_url="https://download.swift.org/swift-$SWIFTVERSION-release/ubuntu2004-$arch_name/swift-$SWIFTVERSION-RELEASE/$archive_name"
  toolchain_dir="$toolchains_dir/$TARGETARCH-$SWIFTVERSION"

  echo "==> Setting up local directories"
  mkdir -p "$downloads_dir"
  mkdir -p "$toolchain_dir"

  cd "$downloads_dir"

  if [ ! -f "$archive_name" ]; then
    echo "==> Downloading Swift toolchain for $TARGETARCH"
    curl -OL "$archive_url"
  fi

  if [ ! -d "$toolchain_dir" ]; then
    echo "==> Unpacking Swift toolchain for $TARGETARCH into $toolchain_dir"
    tar -xvf "$archive_name" --strip-components 1 -C "$toolchain_dir"
  fi
fi
